import React from 'react'
import { Column } from '../common/BaseTable'
import { Chip, IconButton } from "@mui/material";
import { AuditItem } from '@/app/types/userType';
import { Stack } from '@mui/system';
import RemoveRedEyeRoundedIcon from '@mui/icons-material/RemoveRedEyeRounded';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';

interface UserColumnsProps {
    handleEdit: (users: AuditItem) => void;
    handleView: (users: AuditItem) => void;
}

const formatThaiDateTime = (dateString?: string) => {
    if (!dateString) return "-";
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return "-";

    return new Intl.DateTimeFormat("th-TH", {
        dateStyle: "medium",
        timeStyle: "short",
    }).format(date);
};


const userColumns = ({ handleEdit, handleView }: UserColumnsProps): Column<AuditItem>[] =>
    [
        { id: "username", label: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" },
        { id: "fullname", label: "‡∏ä‡∏∑‡πà‡∏≠ - ‡∏™‡∏Å‡∏∏‡∏•" },
        { id: "email", label: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•" },
        { id: "department", label: "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô" },
        {
            id: "role",
            label: "‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
            align: "center",
            render: (row) => {
                switch (row.role) {
                    case "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô":
                        return (
                            <Chip
                                label="‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô"
                                sx={{
                                    backgroundColor: "#0068CB", // ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏°
                                    color: "#fff",
                                    fontSize: 12,
                                    fontWeight: 400,
                                    borderRadius: "6px",
                                    height: 24,
                                }}
                            />
                        );

                    case "‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏≤":
                        return (
                            <Chip
                                label="‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏≤"
                                sx={{
                                    backgroundColor: "#FFF9C4", // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô
                                    color: "#F9A825", // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏°
                                    fontSize: 12,
                                    fontWeight: 400,
                                    borderRadius: "6px",
                                    height: 24,
                                }}
                            />
                        );

                    default:
                        return (
                            <Chip
                                label="‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
                                sx={{
                                    backgroundColor: "#118BE81F", // ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡πà‡∏≠‡∏ô
                                    color: "#1080D6",
                                    fontSize: 12,
                                    fontWeight: 400,
                                    borderRadius: "6px",
                                    height: 24,
                                }}
                            />
                        );
                }
            },
        },
        {
            id: "status",
            label: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
            align: "center",
            render: (row) => {
                const isActive = row.status === "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà";
                return (
                    <Chip
                        label={isActive ? "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà" : "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"}
                        sx={{
                            backgroundColor: isActive ? "#35C2201F" : "#FFEBEE",
                            color: isActive ? "#2A9919" : "#C62828",
                            fontSize: 12,
                            fontWeight: 500,
                            borderRadius: "6px",
                            height: 24,
                        }}
                    />
                );
            },
        },
        {
            id: "lastLogin",
            label: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î",
            align: "center",
            render: (row) => <>{formatThaiDateTime(row.lastLogin)}</>,
        },
        {
            id: "action",
            label: "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£",
            align: "center",
            render: (row) => (
                <Stack direction="row" spacing={0.5} justifyContent="center">
                    {/* üëÅÔ∏è ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç */}
                    <IconButton
                        size="small"
                        color="primary"
                        sx={{
                            backgroundColor: "#fff",
                            borderRadius: 2,
                            boxShadow: "0 0 2px rgba(0,0,0,0.1)",
                            "&:hover": { backgroundColor: "#e3f2fd" },
                        }}
                        onClick={() => handleEdit(row)}
                    >
                        <EditIcon fontSize="small" sx={{ fontSize: 14 }} />
                    </IconButton>

                    {/* ‚úèÔ∏è ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π */}
                    < IconButton
                        size="small"
                        sx={{
                            backgroundColor: "#fff",           // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏∏‡πà‡∏°
                            borderRadius: 2,
                            boxShadow: "0 0 2px rgba(0,0,0,0.1)", // ‡πÄ‡∏á‡∏≤‡∏≠‡πà‡∏≠‡∏ô
                            color: "#616161",                     // ‡∏™‡∏µ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°
                            "&:hover": {
                                backgroundColor: "#e0e0e0",         // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover
                            },
                        }}
                        onClick={() => handleView(row)}
                    >
                        <RemoveRedEyeRoundedIcon fontSize="small" sx={{ fontSize: 14 }} />
                    </ IconButton>


                    {/* ‚ùå ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö */}
                    < IconButton
                        size="small"
                        color="error"
                        sx={{
                            backgroundColor: "#fff",
                            borderRadius: 2,
                            boxShadow: "0 0 2px rgba(0,0,0,0.1)",
                            "&:hover": { backgroundColor: "#ffebee" },
                        }}
                        onClick={() => {
                            const confirmed = window.confirm(`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö ${row.fullname} ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`);
                            if (confirmed) alert(`‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á ${row.fullname} ‡πÅ‡∏•‡πâ‡∏ß`);
                        }}
                    >
                        <DeleteIcon fontSize="small" sx={{ fontSize: 14 }} />
                    </ IconButton>
                </Stack >
            ),
        },
    ]

export default userColumns