// import { Paper, Typography, Box } from '@mui/material'
// import React from 'react'
// import { issuesData } from '@/app/data/issuesData'

// const satisfactionLevels = [
//     { label: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", color: "#0068CB" },
//     { label: "‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°", color: "#2ECC71" },
//     { label: "‡∏î‡∏µ", color: "#27AE60" },
//     { label: "‡∏û‡∏≠‡πÉ‡∏ä‡πâ", color: "#F1C40F" },
//     { label: "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á", color: "#E67E22" },
//     { label: "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏°‡∏≤‡∏Å", color: "#E74C3C" },
// ]

// // üßÆ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö
// const satisfactionScoreMap: Record<string, number> = {
//     "‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°": 5,
//     "‡∏î‡∏µ": 4,
//     "‡∏û‡∏≠‡πÉ‡∏ä‡πâ": 3,
//     "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á": 2,
//     "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏°‡∏≤‡∏Å": 1,
// }

// // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å issuesData
// // const issuesData = [
// //     { id: "1", satisfactionLevel: "‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°" },
// //     { id: "2", satisfactionLevel: "‡∏î‡∏µ" },
// //     { id: "3", satisfactionLevel: "‡∏î‡∏µ" },
// //     { id: "4", satisfactionLevel: "‡∏û‡∏≠‡πÉ‡∏ä‡πâ" },
// //     { id: "5", satisfactionLevel: "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á" },
// //     { id: "6", satisfactionLevel: "‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°" },
// // ]


// const FeedbackIssueSummarySection = () => {
//     // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏ß‡∏°
//     const validIssues = issuesData.filter(
//         i => i.satisfactionLevel && satisfactionScoreMap[i.satisfactionLevel]
//     )

//     const totalItems = validIssues.length
//     const totalScore = validIssues.reduce(
//         (sum, item) => sum + (satisfactionScoreMap[item.satisfactionLevel!] || 0),
//         0
//     )
//     const avgScore = totalItems > 0 ? (totalScore / totalItems).toFixed(2) : "0.00"

//     // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏î‡∏±‡∏ö
//     const satisfactionCount = satisfactionLevels.map(level => {
//         if (level.label === "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢") {
//             return { ...level, count: avgScore } // ‡πÅ‡∏ó‡∏ô count ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
//         }
//         const count = validIssues.filter(
//             item => item.satisfactionLevel === level.label
//         ).length
//         return { ...level, count }
//     })

//     return (
//         <Box
//             sx={{
//                 display: 'flex',
//                 flexWrap: 'wrap',
//                 gap: 2,
//             }}
//         >
//             {satisfactionCount.map(item => (
//                 <Paper
//                     key={item.label}
//                     elevation={0}
//                     sx={{
//                         display: "flex",
//                         flexDirection: "column",
//                         position: "relative",
//                         minHeight: 90,
//                         width: 180,
//                         border: "1px solid #D1D5DB",
//                         backgroundColor: "#F2F2F2",
//                         borderRadius: 3,
//                         overflow: "hidden",
//                         transition: "0.2s",
//                         "&:hover": { backgroundColor: "#E8EBEF" },
//                     }}
//                 >
//                     <Box
//                         sx={{
//                             borderBottom: "1px solid #D1D5DB",
//                             py: 0.8,
//                             px: 1.5,
//                             width: "100%",
//                             backgroundColor: item.color,
//                         }}
//                     >
//                         <Typography sx={{ fontSize: 13, color: "#fff" }}>
//                             {item.label}
//                         </Typography>
//                     </Box>

//                     <Box
//                         sx={{
//                             p: 0,
//                             px: 2.5,
//                             display: "flex",
//                             alignItems: "flex-end",
//                             gap: 1,
//                             justifyContent: "space-between",
//                         }}
//                     >
//                         <Typography sx={{ fontSize: 36, fontWeight: 500 }}>
//                             {item.label === "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢" ? item.count : item.count}
//                         </Typography>
//                         <Typography sx={{ fontSize: 13, color: "#555" }}>
//                             {item.label === "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢" ? "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô" : "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"}
//                         </Typography>
//                     </Box>
//                 </Paper>
//             ))}
//         </Box>
//     )
// }

// export default FeedbackIssueSummarySection
import { Paper, Typography, Box } from '@mui/material'
import React, { useState, useMemo, useEffect } from 'react'
import { issuesData } from '@/app/data/issuesData'

const satisfactionLevels = [
    { label: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", color: "#0068CB" },
    { label: "‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°", color: "#2ECC71" },
    { label: "‡∏î‡∏µ", color: "#27AE60" },
    { label: "‡∏û‡∏≠‡πÉ‡∏ä‡πâ", color: "#F1C40F" },
    { label: "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á", color: "#E67E22" },
    { label: "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏°‡∏≤‡∏Å", color: "#E74C3C" },
]

const satisfactionScoreMap: Record<string, number> = {
    "‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°": 5,
    "‡∏î‡∏µ": 4,
    "‡∏û‡∏≠‡πÉ‡∏ä‡πâ": 3,
    "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á": 2,
    "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏°‡∏≤‡∏Å": 1,
}

interface FeedbackIssueSummarySectionProps {
    onFilterChange: (filtered: typeof issuesData, level: string | null) => void
}

const FeedbackIssueSummarySection: React.FC<FeedbackIssueSummarySectionProps> = ({
    onFilterChange,
}) => {
    const [selectedLevel, setSelectedLevel] = useState<string | null>(null)

    // ‚úÖ Filter ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const filteredIssues = useMemo(() => {
        if (!selectedLevel || selectedLevel === "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢") {
            return issuesData
        }
        return issuesData.filter((i) => i.satisfactionLevel === selectedLevel)
    }, [selectedLevel])

    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å filter
    const validIssues = filteredIssues.filter(
        (i) => i.satisfactionLevel && satisfactionScoreMap[i.satisfactionLevel]
    )
    const totalItems = validIssues.length
    const totalScore = validIssues.reduce(
        (sum, item) =>
            sum + (satisfactionScoreMap[item.satisfactionLevel!] || 0),
        0
    )
    const avgScore =
        totalItems > 0 ? (totalScore / totalItems).toFixed(2) : "0.00"

    // ‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö (‡∏£‡∏ß‡∏°‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà filter ‡πÅ‡∏•‡πâ‡∏ß)
    const satisfactionCount = satisfactionLevels.map((level) => {
        if (level.label === "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢") {
            return { ...level, count: avgScore }
        }
        const count = issuesData.filter(
            (item) => item.satisfactionLevel === level.label
        ).length
        return { ...level, count }
    })

    // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ parent
    useEffect(() => {
        onFilterChange(filteredIssues, selectedLevel)
    }, [filteredIssues, selectedLevel, onFilterChange])

    return (
        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>
            {satisfactionCount.map((item) => {
                const isSelected = selectedLevel === item.label
                const isAverage = item.label === "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"

                // ‚úÖ Logic ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
                const showActiveBg =
                    isAverage || isSelected // ‡∏Å‡∏•‡πà‡∏≠‡∏á "‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢" + ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                const bgColor = showActiveBg ? item.color : "#E6E6E6"

                return (
                    <Paper
                        key={item.label}
                        elevation={0}
                        onClick={() => {
                            // ‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ = ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                            if (isAverage) {
                                setSelectedLevel(null)
                            } else {
                                setSelectedLevel(prev =>
                                    prev === item.label ? null : item.label
                                )
                            }
                        }}
                        sx={{
                            cursor: 'pointer',
                            display: "flex",
                            flexDirection: "column",
                            position: "relative",
                            minHeight: 90,
                            width: 180,
                            border: "1px solid #D1D5DB",
                            borderRadius: 3,
                            overflow: "hidden",
                            transition: "0.2s",
                            backgroundColor: "#F2F2F2",
                            "&:hover": {
                                backgroundColor: "#E8EBEF",
                            },
                        }}
                    >
                        {/* üîπ ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Å‡∏•‡πà‡∏≠‡∏á */}
                        <Box
                            sx={{
                                borderBottom: "1px solid #D1D5DB",
                                py: 0.8,
                                px: 1.5,
                                width: "100%",
                                backgroundColor: bgColor, // ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏ï‡∏≤‡∏° logic ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
                            }}
                        >
                            <Typography sx={{ fontSize: 13, color: "#fff" }}>
                                {item.label}
                            </Typography>
                        </Box>

                        {/* üîπ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á */}
                        <Box
                            sx={{
                                p: 0,
                                px: 2.5,
                                display: "flex",
                                alignItems: "flex-end",
                                gap: 1,
                                justifyContent: "space-between",
                            }}
                        >
                            <Typography sx={{ fontSize: 36, fontWeight: 500 }}>
                                {item.count}
                            </Typography>
                            <Typography sx={{ fontSize: 13, color: "#555" }}>
                                {isAverage ? "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô" : "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"}
                            </Typography>
                        </Box>
                    </Paper>
                )
            })}
        </Box>
    )
}

export default FeedbackIssueSummarySection
