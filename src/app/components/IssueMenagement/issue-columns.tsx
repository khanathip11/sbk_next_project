// app/columns/issueColumns.tsx
import { Column } from "../common/BaseTable";
import { IssueItem } from "@/app/types/IssueItem";
import { Chip, IconButton, Stack, Tooltip, Typography } from "@mui/material";
import EditIcon from "@mui/icons-material/Edit";
import { getTypeStyled } from "@/app/utils/getTypeStyled";
import ReplayRoundedIcon from '@mui/icons-material/ReplayRounded';

const formatThaiDateTime = (dateString: string) => {
    if (!dateString) return "-";
    const [day, month, year] = dateString.split("/").map(Number);
    if (!day || !month || !year) return "-";

    const date = new Date(year, month - 1, day);

    return new Intl.DateTimeFormat("th-TH", {
        dateStyle: "medium",
        timeStyle: "medium",
    }).format(date);
};
interface IssueColumnOptions {
    handleEdit: (issue: IssueItem) => void;
    handleView: (issue: IssueItem) => void;
}

const getTypeStyle = (row: IssueItem) => {
    const status = (row.ackStatus || "").trim();
    const readDuration = row.readDuration || "";
    const reportDateStr = row.date || "";

    // üßÆ ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "1 ‡∏ß‡∏±‡∏ô" ‚Üí 1
    const getDays = (text: string): number => {
        const match = text.match(/\d+/);
        return match ? parseInt(match[0], 10) : 0;
    };

    // üïí ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà dd/mm/yyyy ‚Üí Date object
    const parseDate = (dateStr: string): Date | null => {
        const [day, month, year] = dateStr.split("/").map(Number);
        if (!day || !month || !year) return null;
        const christianYear = year > 2400 ? year - 543 : year; // ‡πÅ‡∏õ‡∏•‡∏á ‡∏û.‡∏®. ‚Üí ‡∏Ñ.‡∏®.
        return new Date(christianYear, month - 1, day);
    };

    const readDays = getDays(readDuration);
    const reportDate = parseDate(reportDateStr);
    const today = new Date();

    // üïì ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    const dueDate = reportDate ? new Date(reportDate.getTime()) : null;
    if (dueDate) dueDate.setDate(dueDate.getDate() + readDays);

    let text = ""; // ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
    let background = "#FCBF041F";
    let color = "#CA9802";

    // üü• ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡πà‡∏≤‡∏ô
    if (status === "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡πà‡∏≤‡∏ô") {
        if (dueDate) {
            const diffTime = dueDate.getTime() - today.getTime();
            const diffHours = diffTime / (1000 * 60 * 60);
            const diffDays = Math.floor(diffHours / 24);

            if (diffTime > 0) {
                // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤
                text = diffDays >= 1
                    ? `(‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${diffDays} ‡∏ß‡∏±‡∏ô)`
                    : `(‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${Math.round(diffHours)} ‡∏ä‡∏°.)`;
            } else {
                // ‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
                const overDays = Math.abs(diffDays);
                text = overDays >= 1
                    ? `(‡πÄ‡∏Å‡∏¥‡∏ô ${overDays} ‡∏ß‡∏±‡∏ô)`
                    : `(‡πÄ‡∏Å‡∏¥‡∏ô ${Math.abs(Math.round(diffHours))} ‡∏ä‡∏°.)`;
            }
        }

        return { background: "#F03D3D1F", color: "#E92020", text };
    }

    // üü¢ ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    if (status === "‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß") {
        if (!reportDate || !dueDate) {
            text = `(‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô)`;
            return { background: "#35C2201F", color: "#2A9919", text };
        }

        // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏≤‡∏à‡∏°‡∏µ field readAt)
        const readAt = today;

        const diffTime = readAt.getTime() - dueDate.getTime();
        const diffHours = diffTime / (1000 * 60 * 60);
        const diffDays = Math.floor(diffHours / 24);

        if (diffDays <= 0) {
            // ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            text = `(‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ ${readAt.toLocaleString("th-TH", {
                dateStyle: "medium",
                timeStyle: "short",
            })})`;
            background = "#35C2201F";
            color = "#2A9919";
        } else {
            // ‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
            text =
                diffDays >= 1
                    ? `(‡πÄ‡∏Å‡∏¥‡∏ô ${diffDays} ‡∏ß‡∏±‡∏ô)`
                    : `(‡πÄ‡∏Å‡∏¥‡∏ô ${Math.abs(Math.round(diffHours))} ‡∏ä‡∏°.)`;
            background = "#FCBF041F";
            color = "#CA9802";
        }

        return { background, color, text };
    }

    return { background, color, text: "(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞)" };
};


export const issueColumns = ({
    handleEdit,
    handleView,
}: IssueColumnOptions): Column<IssueItem>[] => [
        {
            id: "problem",
            label: "‡∏õ‡∏±‡∏ç‡∏´‡∏≤",
            render: (row) => (
                <Stack direction="row" spacing={1} alignItems="center">
                    {row.img?.length > 0 && (
                        <Typography sx={{ fontSize: 13 }}>{row.problem}</Typography>
                    )}
                </Stack>
            ),
        },
        {
            id: "date", label: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á", align: "left", render: (row: IssueItem) => (
                <Typography sx={{ fontSize: 12 }}>
                    {formatThaiDateTime(row.date)}
                </Typography>
            ),
        },
        { id: "category", label: "‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤", align: "left" },
        {
            id: "level",
            label: "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤",
            align: "center",
            render: (row) => (
                <Chip
                    label={row.level}
                    sx={{
                        backgroundColor: row.level === "‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô" ? "#FFEBEE" : "#E3F2FD",
                        color: row.level === "‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô" ? "#C62828" : "#1976D2",
                        fontWeight: 500,
                        fontSize: 12,
                        borderRadius: "6px",
                    }}
                    size="small"
                />
            ),
        },
        {
            id: "center",
            label: "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
            align: "left",
            render: (row) => {
                const isEmpty = !row.center || row.center.trim() === "";

                return (
                    <Typography
                        sx={{
                            display: "flex",
                            alignItems: "center",
                            fontSize: 12,
                            fontWeight: 500,
                            borderRadius: "6px",
                            color: isEmpty ? "#FCBF04" : "#000", // ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á
                            gap: 0.5, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                        }}
                    >
                        {isEmpty ? (
                            <>
                                <ReplayRoundedIcon sx={{ fontSize: 16 }} />
                                ‡∏£‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå
                            </>
                        ) : (
                            row.center
                        )}
                    </Typography>
                );
            },
        },
        {
            id: "forwardedFrom",
            label: "‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å",
            align: "left",
            render: (row) => {
                const isEmpty = row.forwardedFrom === null || row.forwardedFrom === undefined || row.forwardedFrom.trim() === "";

                return (
                    <Typography
                        sx={{
                            fontSize: 12,
                            fontWeight: 500,
                            borderRadius: "6px",
                            color: "#000", // ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á
                        }}
                    >
                        {isEmpty ? "-" : row.forwardedFrom}
                    </Typography>
                );
            },
        },
        {
            id: "ackStatus",
            label: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏π‡πâ",
            align: "center",
            render: (row) => {
                const style = getTypeStyle(row);
                return (
                    <Stack alignItems="center" spacing={0.3}>
                        <Chip
                            label={row.ackStatus}
                            sx={{
                                backgroundColor: style.background,
                                color: style.color,
                                fontSize: 12,
                                fontWeight: 500,
                                borderRadius: "6px",
                            }}
                            size="small"
                        />
                        <Typography sx={{ fontSize: 11, color: style.color }}>
                            {style.text}
                        </Typography>
                    </Stack>
                );
            },
        },
        { id: "assignee", label: "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", align: "left" },
        { id: "reportType", label: "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á", align: "left" },
        {
            id: "solutionStatus",
            label: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤",
            align: "center",
            render: (row) => {
                const style = getTypeStyled(row.solutionStatus || ""); // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô

                return (
                    <Chip
                        label={row.solutionStatus}
                        sx={{
                            backgroundColor: style.background,
                            color: style.color,
                            fontWeight: 500,
                            fontSize: 12,
                            borderRadius: "6px",
                        }}
                        size="small"
                    />
                );
            },
        },
        {
            id: "action",
            label: "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£",
            align: "center",
            render: (row) => (
                <Stack direction="row" spacing={0.5} justifyContent="center">
                    <Tooltip title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç">
                        <IconButton
                            size="small"
                            color="primary"
                            sx={{
                                display: 'flex',
                                gap: 1,
                                px: 1.5,
                                backgroundColor: "#004D99",
                                borderRadius: 3,
                                boxShadow: "0 0 2px rgba(0,0,0,0.1)",
                                "&:hover": { backgroundColor: "#003970" },
                            }}
                            onClick={() => handleEdit(row)}
                        >
                            <EditIcon fontSize="small" sx={{ fontSize: 16, color: '#fff' }} />
                            <Typography sx={{ fontSize: 12, color: '#fff' }}>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</Typography>
                        </IconButton>
                    </Tooltip>
                </Stack>
            ),
        },
    ];
