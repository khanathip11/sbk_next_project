// ‚úÖ TaskBoard.tsx
import { Box, Card, CardContent, CardMedia, Stack, Typography } from '@mui/material'
import React from 'react'
import { StaticImageData } from "next/image";
import { IssueItem } from '@/app/types/IssueItem';
import { getTypeStyled } from '@/app/utils/getTypeStyled';

/**
 * üîπ Props ‡∏Ç‡∏≠‡∏á TaskBoard
 * - card: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
 * - onClick: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î (‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)
 */
interface TaskBoardProps {
    card: IssueItem;
    onClick: () => void;
}

/**
 * ‚úÖ Component: TaskBoard
 * ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ ‚Äú‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‚Äù
 * ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Overview, ComplaintMap ‡∏´‡∏£‡∏∑‡∏≠ Task List
 */
const TaskBoard: React.FC<TaskBoardProps> = ({ card, onClick }) => {
    const { background, color } = getTypeStyled(card.status);

    return (
        <>
            {/* üîπ ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏´‡∏•‡∏±‡∏Å */}
            <Card
                onClick={onClick}
                sx={{
                    width: '100%',
                    display: 'flex',
                    mb: 1,
                    p: 1,
                    borderRadius: 4,
                    boxShadow: 'none',
                    cursor: 'pointer',
                    '&:hover': {
                        backgroundColor: '#f9f9f9',
                    }
                }}
            >
                <CardMedia
                    component="img"
                    image={
                        card.img && card.img.length > 0
                            ? typeof card.img[0] === "string"
                                ? card.img[0]
                                : card.img[0]?.src
                            : "/placeholder.jpg" // ‚úÖ fallback ‡∏£‡∏π‡∏õ placeholder
                    }
                    alt="Preview Image"
                    sx={{
                        borderRadius: 4,
                        width: 70,
                        height: 70,
                        objectFit: 'cover',
                        mt: 0.1,
                        ml: 0.2,
                    }}
                />
                {/* üî∏ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πå‡∏î */}
                <Box sx={{ width: '100%', overflow: 'hidden' }}>
                    {/* ‚úÖ ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å: ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡πà‡∏≠ + ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
                    <Stack direction={'row'} px={2} pt={0.5}>
                        <Typography
                            fontSize={10}
                            noWrap
                            sx={{
                                textOverflow: 'ellipsis',
                                maxWidth: '80px',
                                color: 'blue',
                            }}
                        >
                            {/* ‡∏ñ‡πâ‡∏≤‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô 18 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‚Üí ‡∏ï‡∏±‡∏î‡∏î‡πâ‡∏ß‡∏¢ ‚Ä¶ */}
                            {card.problem?.length > 18
                                ? card.category.slice(0, 18) + '‚Ä¶'
                                : card.category}
                        </Typography>

                        <Box flexGrow={1} />

                        {/* ‡∏õ‡πâ‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÄ‡∏ä‡πà‡∏ô ‚Äú‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß‚Äù, ‚Äú‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‚Äù */}
                        <Typography
                            fontSize={10}
                            noWrap
                            sx={{
                                color: color,
                                bgcolor: background,
                                p: 0.3,
                                borderRadius: 1,
                            }}
                        >
                            {card.status?.length > 30
                                ? card.status.slice(0, 30) + '‚Ä¶'
                                : card.status}
                        </Typography>
                    </Stack>

                    {/* ‚úÖ ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ */}
                    <CardContent sx={{ py: 0 }}>
                        <Typography
                            variant="subtitle1"
                            color="text.black"
                            fontSize={12}
                            noWrap
                        >
                            {card.problem}
                        </Typography>
                        <Typography
                            color="text.secondary"
                            fontSize={10}
                            noWrap
                        >
                            {card.problem}
                        </Typography>
                    </CardContent>

                    {/* ‚úÖ ‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏á: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ */}
                    <Stack direction={'row'} px={2}>
                        <Typography fontSize={10}>{card.location}</Typography>
                        <Box flexGrow={1} />
                        <Typography fontSize={10}>{card.date}</Typography>
                    </Stack>
                </Box>
            </Card>
        </>
    )
}

export default TaskBoard;
