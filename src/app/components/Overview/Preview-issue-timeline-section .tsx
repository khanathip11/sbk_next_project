// "use client";
// import React, { useState } from 'react'
// import {
//     Box,
//     Typography,
//     Collapse,
//     Avatar,
// } from "@mui/material";
// import SpokeOutlinedIcon from '@mui/icons-material/SpokeOutlined';
// import {
//     Timeline,
//     TimelineItem,
//     TimelineSeparator,
//     TimelineDot,
//     TimelineConnector,
//     TimelineContent,
//     timelineItemClasses,
// } from "@mui/lab";
// import KeyboardArrowDownIcon from "@mui/icons-material/KeyboardArrowDown";
// import KeyboardArrowUpIcon from "@mui/icons-material/KeyboardArrowUp";
// import CloseIcon from "@mui/icons-material/Close";
// import CheckCircleIcon from '@mui/icons-material/CheckCircle';
// import { IssueItem } from '@/app/types/IssueItem';

// interface PreviewIssueTimelineSectionProps {
//     issue: IssueItem[];
// }
// /**
//  * ‚úÖ Component: PreviewIssueTimelineSection
//  * ‡πÅ‡∏™‡∏î‡∏á timeline ‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå (‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°)
//  * ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Collapse ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
//  */

// const PreviewIssueTimelineSection: React.FC<PreviewIssueTimelineSectionProps> = ({ issue }) => {
//     const [openDropdown, setOpenDropdown] = useState(false); // üîπ toggle ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î timeline

//     // üü¶ helper: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
//     const getDotStyle = (status: string) => {
//         switch (status) {
//             case "‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß":
//                 return { bg: "#E8F5E9", color: "#4CAF50" }; // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
//             case "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ":
//                 return { bg: "#FFEBEE", color: "#F44336" }; // ‡πÅ‡∏î‡∏á
//             case "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£":
//                 return { bg: "#E3F2FD", color: "#1976D2" }; // ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
//             default:
//                 return { bg: "#F5F5F5", color: "#9E9E9E" }; // ‡πÄ‡∏ó‡∏≤
//         }
//     };

//     // üîπ ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° (connector) ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
//     const getConnectorColor = (status: string) => {
//         switch (status) {
//             case "‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß": return "#A5D6A7";
//             case "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ": return "#EF9A9A";
//             case "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£": return "#90CAF9";
//             default: return "#E0E0E0";
//         }
//     };

//     // üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
//     const getIcon = (status: string, index: number) => {
//         if (status === "success") return <CheckCircleIcon sx={{ fontSize: 16 }} />;
//         if (status === "failed") return <CloseIcon sx={{ fontSize: 16 }} />;
//         // üî∏ ‡∏Å‡∏£‡∏ì‡∏µ in_progress ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
//         return (
//             <Typography sx={{ fontSize: 12, fontWeight: 600 }}>
//                 {index + 1}
//             </Typography>
//         );
//     };

//     return (
//         <>
//             {/* üîπ Header ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á Timeline */}
//             <Box sx={{ display: "flex", justifyContent: "space-between" }}>
//                 <Box sx={{ display: "flex", flexDirection: "column" }}>
//                     <Box sx={{ display: "flex", gap: 1, alignItems: "center" }}>
//                         <SpokeOutlinedIcon sx={{ fontSize: 16 }} />
//                         <Typography sx={{ mb: 0, fontSize: 13, fontWeight: 600 }}>
//                             ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
//                         </Typography>
//                     </Box>
//                     <Typography color="text.secondary" sx={{ ml: "24px", fontSize: 12 }}>
//                         ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
//                     </Typography>
//                 </Box>

//                 {/* üîπ ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏®‡∏£‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î */}
//                 {!openDropdown ? (
//                     <KeyboardArrowDownIcon
//                         onClick={() => setOpenDropdown(true)}
//                         sx={{ fontSize: 18, cursor: "pointer" }}
//                     />
//                 ) : (
//                     <KeyboardArrowUpIcon
//                         onClick={() => setOpenDropdown(false)}
//                         sx={{ fontSize: 18, cursor: "pointer" }}
//                     />
//                 )}
//             </Box>

//             {/* üîπ ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ Timeline (‡∏ã‡πà‡∏≠‡∏ô/‡πÅ‡∏™‡∏î‡∏á‡∏î‡πâ‡∏ß‡∏¢ Collapse) */}
//             <Collapse in={openDropdown} timeout="auto" unmountOnExit>
//                 <Box sx={{ mt: 1 }}>
//                     <Timeline
//                         sx={{
//                             [`& .${timelineItemClasses.root}:before`]: {
//                                 flex: 0,
//                                 padding: 0, // ‚úÖ ‡∏ï‡∏±‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏ã‡πâ‡∏≥
//                             },
//                             mt: 0,
//                             pt: 0,
//                         }}
//                     >
//                         {/* üî∏ Loop ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ timeline item */}
//                         {issue.map((item, index) => {
//                             const { bg, color } = getDotStyle(item.status);

//                             return (
//                                 <TimelineItem key={index}>
//                                     {/* ‡∏à‡∏∏‡∏î‡∏Å‡∏•‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° */}
//                                     <TimelineSeparator sx={{ py: 0 }}>
//                                         <TimelineDot
//                                             sx={{
//                                                 width: 26,
//                                                 height: 26,
//                                                 p: 0,
//                                                 m: 0.5,
//                                                 display: "flex",
//                                                 alignItems: "center",
//                                                 justifyContent: "center",
//                                                 boxShadow: "none",
//                                                 backgroundColor: bg,
//                                                 color: color,
//                                             }}
//                                         >
//                                             {getIcon(item.status, index)}
//                                         </TimelineDot>

//                                         {/* ‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° timeline */}
//                                         {index < issue.length - 1 && (
//                                             <TimelineConnector
//                                                 sx={{
//                                                     backgroundColor: getConnectorColor(item.status),
//                                                     width: 2,
//                                                 }}
//                                             />
//                                         )}
//                                     </TimelineSeparator>

//                                     {/* ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ event */}
//                                     <TimelineContent sx={{ pb: 2, minWidth: 0 }}>
//                                         <Typography
//                                             sx={{
//                                                 color: "text.secondary",
//                                                 fontSize: 12,
//                                                 lineHeight: 1.2,
//                                             }}
//                                         >
//                                             {item.date} ‚Ä¢ {item.date}
//                                         </Typography>

//                                         <Typography
//                                             sx={{
//                                                 fontSize: 13,
//                                                 fontWeight: 400,
//                                                 color: "#000000",
//                                                 mb: item.img.length > 0 ? 1 : 0,
//                                             }}
//                                         >
//                                             {item.status}
//                                         </Typography>

//                                         {/* ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÅ‡∏ô‡∏ö ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô list ‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô */}
//                                         {item.img.length > 0 && (
//                                             <Box
//                                                 sx={{
//                                                     mt: 1,
//                                                     display: "flex",
//                                                     flexWrap: "nowrap",
//                                                     gap: 1,
//                                                     overflowX: "auto",
//                                                     scrollbarWidth: "none", // Firefox
//                                                     "&::-webkit-scrollbar": { display: "none" }, // Chrome, Safari
//                                                 }}
//                                             >
//                                                 {item.img.map((img, i) => (
//                                                     <Avatar
//                                                         key={i}
//                                                         variant="rounded"
//                                                         src={typeof img === "string" ? img : img.src}
//                                                         sx={{
//                                                             width: 60,
//                                                             height: 60,
//                                                             borderRadius: 2,
//                                                             border: "1px solid #E0E0E0",
//                                                             flex: "0 0 auto",
//                                                         }}
//                                                     />
//                                                 ))}
//                                             </Box>
//                                         )}
//                                     </TimelineContent>
//                                 </TimelineItem>
//                             );
//                         })}
//                     </Timeline>
//                 </Box>
//             </Collapse>
//         </>
//     )
// }

// export default PreviewIssueTimelineSection;

"use client";
import React, { useState } from "react";
import {
    Box,
    Typography,
    Collapse,
} from "@mui/material";
import SpokeOutlinedIcon from "@mui/icons-material/SpokeOutlined";
import {
    Timeline,
    TimelineItem,
    TimelineSeparator,
    TimelineDot,
    TimelineConnector,
    TimelineContent,
    timelineItemClasses,
} from "@mui/lab";
import KeyboardArrowDownIcon from "@mui/icons-material/KeyboardArrowDown";
import KeyboardArrowUpIcon from "@mui/icons-material/KeyboardArrowUp";

import { IssueItem } from "@/app/types/IssueItem";
import { TIMELINE_STEPS, FAILED_STEP } from "@/app/utils/statusConfig";

interface PreviewIssueTimelineSectionProps {
    issue: IssueItem;
}

const PreviewIssueTimelineSection: React.FC<PreviewIssueTimelineSectionProps> = ({ issue }) => {
    const [openDropdown, setOpenDropdown] = useState(false);

    // üß† Function mapping ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏£‡∏¥‡∏á -> Step
    const getCurrentStep = (status: string): number => {
        switch (status) {
            case "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£":
                return 1;
            case "‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô":
                return 2;
            case "‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß":
            case "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô":
                return 3;
            default:
                return 0; // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£
        }
    };

    const status = issue.status;
    const isFailed = status === "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ";
    const currentStep = getCurrentStep(status);

    // üß© ‡∏ñ‡πâ‡∏≤ fail ‚Üí ‡πÉ‡∏ä‡πâ FAILED_STEP ‡πÅ‡∏ó‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    const stepsToShow = isFailed
        ? [...TIMELINE_STEPS.slice(0, 2), FAILED_STEP]
        : TIMELINE_STEPS;

    return (
        <>
            {/* üîπ Header */}
            <Box sx={{ display: "flex", justifyContent: "space-between" }}>
                <Box sx={{ display: "flex", flexDirection: "column" }}>
                    <Box sx={{ display: "flex", gap: 1, alignItems: "center" }}>
                        <SpokeOutlinedIcon sx={{ fontSize: 16 }} />
                        <Typography sx={{ mb: 0, fontSize: 13, fontWeight: 600 }}>
                            ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
                        </Typography>
                    </Box>
                    <Typography color="text.secondary" sx={{ ml: "24px", fontSize: 12 }}>
                        ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
                    </Typography>
                </Box>

                {/* üîπ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î */}
                {!openDropdown ? (
                    <KeyboardArrowDownIcon
                        onClick={() => setOpenDropdown(true)}
                        sx={{ fontSize: 18, cursor: "pointer" }}
                    />
                ) : (
                    <KeyboardArrowUpIcon
                        onClick={() => setOpenDropdown(false)}
                        sx={{ fontSize: 18, cursor: "pointer" }}
                    />
                )}
            </Box>

            {/* üîπ Timeline */}
            <Collapse in={openDropdown} timeout="auto" unmountOnExit>
                <Box sx={{ mt: 1 }}>
                    <Timeline
                        sx={{
                            [`& .${timelineItemClasses.root}:before`]: {
                                flex: 0,
                                padding: 0,
                            },
                            mt: 0,
                            pt: 0,
                        }}
                    >
                        {stepsToShow.map((step, index) => {
                            const isActive = index + 1 <= currentStep;
                            const isLast = index === stepsToShow.length - 1;

                            return (
                                <TimelineItem key={step.id}>
                                    <TimelineSeparator>
                                        <TimelineDot
                                            sx={{
                                                width: 26,
                                                height: 26,
                                                display: "flex",
                                                alignItems: "center",
                                                justifyContent: "center",
                                                backgroundColor: isActive ? step.bg : "#F5F5F5",
                                                color: isActive ? step.color : "#9E9E9E",
                                                boxShadow: "none",
                                                transition: "all 0.3s ease",
                                            }}
                                        >
                                            {isActive ? step.icon : index + 1}
                                        </TimelineDot>

                                        {!isLast && (
                                            <TimelineConnector
                                                sx={{
                                                    backgroundColor: isActive ? step.color : "#E0E0E0",
                                                    width: 2,
                                                    transition: "all 0.3s ease",
                                                }}
                                            />
                                        )}
                                    </TimelineSeparator>

                                    <TimelineContent>
                                        <Typography
                                            sx={{
                                                fontSize: 13,
                                                // color: isActive ? step.color : "#9E9E9E",
                                                fontWeight: isActive ? 600 : 400,
                                                transition: "color 0.3s ease",
                                            }}
                                        >
                                            {step.label}
                                        </Typography>
                                    </TimelineContent>
                                </TimelineItem>
                            );
                        })}
                    </Timeline>
                </Box>
            </Collapse>
        </>
    );
};

export default PreviewIssueTimelineSection;

