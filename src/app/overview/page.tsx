// "use client";

// import React, { useState } from "react";
// import Navbar from "../components/Overview/Navbar";
// import { Box, Paper, useTheme, useMediaQuery } from "@mui/material";
// import TaskSummary from "../components/Overview/Task-summary";
// import TaskBoard from "../components/Overview/Task-board";
// import ComplaintMap from "../components/Overview/Complaint-map";
// import PreviewPanal from "../components/Overview/Preview-panal";
// import { CardItem } from "../types/CardItem";
// import { cardsData } from '../data/CardsData';

// export default function HomePage() {
//     const [collapsed, setCollapsed] = useState<boolean>(true);
//     const [closeTask, SetCloseTask] = useState<boolean>(false);
//     const [selectedCard, setSelectedCard] = useState<CardItem | null>(null);

//     const theme = useTheme();
//     const isLgUp = useMediaQuery(theme.breakpoints.up("lg"));
//     const isXlUp = useMediaQuery(theme.breakpoints.up("xl"));

//     return (
//         <Box sx={{
//             display: "flex",
//             p: 1,
//             bgcolor: "#ebecf0",
//             height: isLgUp ? "100vh" : "100%",
//             gap: 2,
//             position: "relative",
//         }}>
//             <Paper
//                 elevation={5}
//                 sx={{
//                     borderRadius: 4,
//                     bgcolor: '#f9f9f9',
//                     width: (() => {
//                         if (isXlUp) {
//                             return collapsed ? (closeTask ? "4%" : "4%") : (closeTask ? "20%" : "16%");
//                         }
//                         if (isLgUp) {
//                             return collapsed ? (closeTask ? "6%" : "6%") : (closeTask ? "35.5%" : "26%");
//                         }
//                         return "100%"; // fallback ‡∏ö‡∏ô‡∏à‡∏≠‡πÄ‡∏•‡πá‡∏Å
//                     })(),
//                     transition: 'width 0.5s ease',
//                     height: closeTask ? '100%' : 'auto',
//                 }}
//             >
//                 <Navbar collapsed={collapsed} setCollapsed={setCollapsed} />
//             </Paper>

//             <Paper
//                 elevation={5}
//                 sx={{
//                     borderRadius: 4,
//                     bgcolor: '#f9f9f9',
//                     width: '100%',
//                     display: 'flex',
//                     alignItems: 'center',
//                     justifyContent: 'center',
//                     p: 0,
//                     m: 0
//                 }}
//             >
//                 <ComplaintMap collapse={collapsed} closeTask={closeTask} cardsData={cardsData} />
//             </Paper>

//             <Paper
//                 id="task-container"
//                 elevation={5}
//                 sx={{
//                     borderRadius: 4,
//                     bgcolor: '#f9f9f9',
//                     width: (() => {
//                         if (isXlUp) {
//                             return collapsed ? (closeTask ? "30%" : "1.4%") : (closeTask ? "30%" : "1.5%");
//                         }
//                         if (isLgUp) {
//                             return collapsed ? (closeTask ? "40%" : "2%") : (closeTask ? "40%" : "2.2%");
//                         }
//                         return "100%"; // fallback ‡∏ö‡∏ô‡∏à‡∏≠‡πÄ‡∏•‡πá‡∏Å
//                     })(),
//                     p: !selectedCard ? 1 : 0,
//                     transition: 'width 0.3s ease',
//                     height: '100%',
//                     maxHeight: 'calc(100vh)',
//                     overflowY: 'auto',
//                     scrollbarWidth: 'none', // Firefox
//                     msOverflowStyle: 'none', // IE ‡πÅ‡∏•‡∏∞ Edge ‡πÄ‡∏Å‡πà‡∏≤
//                     '&::-webkit-scrollbar': {
//                         display: 'none', // Chrome, Safari
//                     },
//                     "&::-webkit-scrollbar-thumb": {
//                         backgroundColor: "#c1c1c1",
//                         borderRadius: "4px",
//                     },
//                     "&::-webkit-scrollbar-thumb:hover": {
//                         backgroundColor: "#a0a0a0",
//                     },
//                 }}
//             >
//                 <TaskSummary
//                     count={120}
//                     closeTask={closeTask}
//                     SetCloseTask={SetCloseTask}
//                     selectedCard={selectedCard}
//                 />

//                 {/* ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ closeTask = true */}
//                 {closeTask ? (
//                     !selectedCard ? (
//                         cardsData.map((card) => (
//                             <TaskBoard
//                                 key={card.id}
//                                 card={card}
//                                 onClick={() => setSelectedCard(card)}
//                             />
//                         ))
//                     ) : (
//                         <PreviewPanal
//                             card={selectedCard}
//                             onBack={() => setSelectedCard(null)}
//                         />
//                     )
//                 ) : null}
//             </Paper>
//         </Box >
//     );
// }

"use client";

import React, { useState } from "react";
import Navbar from "../components/Overview/Navbar";
import { Box, Paper, useTheme, useMediaQuery } from "@mui/material";
import TaskSummary from "../components/Overview/Task-summary";
import TaskBoard from "../components/Overview/Task-board";
import ComplaintMap from "../components/Overview/Complaint-map";
import PreviewPanal from "../components/Overview/Preview-panal";
import { CardItem } from "../types/CardItem";
import { cardsData } from '../data/CardsData';

export default function HomePage() {
    // üîí ‡πÅ‡∏ú‡∏á‡∏ã‡πâ‡∏≤‡∏¢ (Navbar) ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏¢‡πà‡∏≠/‡∏Ç‡∏¢‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (true = ‡∏¢‡πà‡∏≠)
    const [collapsed, setCollapsed] = useState<boolean>(true);

    // üìå ‡πÅ‡∏ú‡∏á‡∏Ç‡∏ß‡∏≤ (Task container) ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î (true = ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£/‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß)
    const [closeTask, SetCloseTask] = useState<boolean>(false);

    // üü® ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤ (null = ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
    const [selectedCard, setSelectedCard] = useState<CardItem | null>(null);

    // üß† ‡πÉ‡∏ä‡πâ theme + breakpoint ‡∏Ç‡∏≠‡∏á MUI ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    const theme = useTheme();
    const isLgUp = useMediaQuery(theme.breakpoints.up("lg"));   // ‚â• lg
    const isXlUp = useMediaQuery(theme.breakpoints.up("xl"));   // ‚â• xl

    return (
        <Box
            sx={{
                display: "flex",
                p: 1,
                bgcolor: "#ebecf0",
                height: isLgUp ? "100vh" : "100%", // ‡∏à‡∏≠‡πÉ‡∏´‡∏ç‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡πá‡∏° viewport, ‡∏à‡∏≠‡πÄ‡∏•‡πá‡∏Å‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡∏ï‡πå
                gap: 2,
                position: "relative",
            }}
        >
            {/* =========================
          ‡πÅ‡∏ú‡∏á‡∏ã‡πâ‡∏≤‡∏¢: Navbar / Menu
         ========================= */}
            <Paper
                elevation={5}
                sx={{
                    borderRadius: 4,
                    bgcolor: '#f9f9f9',
                    // üßÆ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ö responsive:
                    // - ‡πÅ‡∏¢‡∏Å‡∏Å‡∏£‡∏ì‡∏µ‡∏à‡∏≠ xl / lg / ‡πÄ‡∏•‡πá‡∏Å
                    // - ‡πÅ‡∏¢‡∏Å‡∏¢‡πà‡∏≠‡∏¢‡∏ï‡∏≤‡∏° collapsed (‡∏¢‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π‡∏ã‡πâ‡∏≤‡∏¢) ‡πÅ‡∏•‡∏∞ closeTask (‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡∏á‡∏Ç‡∏ß‡∏≤)
                    width: (() => {
                        if (isXlUp) {
                            // ‡∏à‡∏≠‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å
                            return collapsed ? (closeTask ? "4%" : "4%") : (closeTask ? "20%" : "16%");
                        }
                        if (isLgUp) {
                            // ‡∏à‡∏≠‡πÉ‡∏´‡∏ç‡πà
                            return collapsed ? (closeTask ? "6%" : "6%") : (closeTask ? "35.5%" : "26%");
                        }
                        // ‡∏à‡∏≠‡πÄ‡∏•‡πá‡∏Å (‡πÄ‡∏ä‡πà‡∏ô mobile) ‡πÉ‡∏´‡πâ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á (stack ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á)
                        return "100%";
                    })(),
                    transition: 'width 0.5s ease',  // ü™Ñ ‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏ï‡∏≠‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
                    height: closeTask ? '100%' : 'auto', // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡∏á‡∏Ç‡∏ß‡∏≤ ‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠ align ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°
                }}
            >
                {/* Navbar ‡∏à‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° collapsed ‡∏ú‡πà‡∏≤‡∏ô props */}
                <Navbar collapsed={collapsed} setCollapsed={setCollapsed} />
            </Paper>

            {/* =========================
          ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏≤‡∏á: ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà (Map)
         ========================= */}
            <Paper
                elevation={5}
                sx={{
                    borderRadius: 4,
                    bgcolor: '#f9f9f9',
                    width: '100%',                 // ‡πÇ‡∏ã‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏¢‡∏∑‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    p: 0,
                    m: 0
                }}
            >
                {/* ComplaintMap ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà + ‡πÅ‡∏ñ‡∏ö Overview/Filter ‡∏•‡∏≠‡∏¢‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            ‡∏£‡∏±‡∏ö collapsed/closeTask ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î layout ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ô */}
                <ComplaintMap collapse={collapsed} closeTask={closeTask} cardsData={cardsData} />
            </Paper>

            {/* =========================
          ‡πÅ‡∏ú‡∏á‡∏Ç‡∏ß‡∏≤: Task Container
         ========================= */}
            <Paper
                id="task-container"
                elevation={5}
                sx={{
                    borderRadius: 4,
                    bgcolor: '#f9f9f9',
                    // üßÆ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏á‡∏Ç‡∏ß‡∏≤: ‡∏ñ‡πâ‡∏≤ closeTask = true (‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡∏á) ‡∏à‡∏∞‡∏Å‡∏ß‡πâ‡∏≤‡∏á; ‡∏ñ‡πâ‡∏≤‡∏õ‡∏¥‡∏î‡∏à‡∏∞‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ñ‡∏ö
                    width: (() => {
                        if (isXlUp) {
                            return collapsed ? (closeTask ? "30%" : "1.4%") : (closeTask ? "30%" : "1.5%");
                        }
                        if (isLgUp) {
                            return collapsed ? (closeTask ? "40%" : "2%") : (closeTask ? "40%" : "2.2%");
                        }
                        return "100%"; // ‡∏à‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ã‡πâ‡∏≠‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
                    })(),
                    p: !selectedCard ? 1 : 0,       // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏î ‡∏õ‡∏£‡∏±‡∏ö padding = 0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
                    transition: 'width 0.3s ease',
                    height: '100%',
                    maxHeight: 'calc(100vh)',       // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÅ‡∏ú‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÑ‡∏î‡πâ
                    overflowY: 'auto',
                    // ‡∏ã‡πà‡∏≠‡∏ô scrollbar ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≤‡∏á ‡πÜ
                    scrollbarWidth: 'none',
                    msOverflowStyle: 'none',
                    '&::-webkit-scrollbar': { display: 'none' },
                    "&::-webkit-scrollbar-thumb": {
                        backgroundColor: "#c1c1c1",
                        borderRadius: "4px",
                    },
                    "&::-webkit-scrollbar-thumb:hover": {
                        backgroundColor: "#a0a0a0",
                    },
                }}
            >
                {/* ‡πÅ‡∏ñ‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏á‡∏Ç‡∏ß‡∏≤: ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏®‡∏£‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå/‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß */}
                <TaskSummary
                    count={120}                 // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
                    closeTask={closeTask}       // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡∏á
                    SetCloseTask={SetCloseTask} // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô toggle ‡πÅ‡∏ú‡∏á
                    selectedCard={selectedCard} // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "Preview"
                />

                {/* ================================
            ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÅ‡∏ú‡∏á‡∏Ç‡∏ß‡∏≤ (conditional render)
            - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ closeTask = true ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            - ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î => ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ï‡∏£ (TaskBoard) ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏•‡πâ‡∏ß  => ‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß (PreviewPanal)
           ================================= */}
                {closeTask ? (
                    !selectedCard ? (
                        // üîπ ‡πÇ‡∏´‡∏°‡∏î "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πå‡∏î": map ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏à‡∏≤‡∏Å cardsData
                        cardsData.map((card) => (
                            <TaskBoard
                                key={card.id}
                                card={card}
                                onClick={() => setSelectedCard(card)} // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
                            />
                        ))
                    ) : (
                        // üîπ ‡πÇ‡∏´‡∏°‡∏î "‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏î": ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πå‡∏î
                        <PreviewPanal
                            card={selectedCard}
                            onBack={() => setSelectedCard(null)} // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πå‡∏î
                        />
                    )
                ) : null}
            </Paper>
        </Box>
    );
}
